<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.prj09.mybatis.mapper.member_t">

  <!-- select 결과를 AddressDto와 매핑하는 작업 -->
  <!--   
    id          : PK 
    result      : 일반 fild
    association : Dto 
  -->
  
  <resultMap type="AddressDto" id="AddressMap">
    <id     column="ADDRESS_NO"     property="addressNo"/> <!-- select의 칼럼과 Dto의 필드를 연결하는 작업 -->
    <result column="ZONECODE"       property="zonecode"/>
    <result column="ADDRESS"        property="address"/>
    <result column="DETAIL_ADDRESS" property="detailAddress"/>
    <result column="EXTRA_ADDRESS"  property="extraAddress"/>
    <association javaType="MemberDto" property="member"> <!-- javaType 명시 필요 -->
      <id     column="MEMBER_NO" property="memberNo"/>   <!-- MemberDto의 필드 명시 필요 -->
      <result column="EMAIL"     property="email"/>
      <result column="NAME"      property="name"/>
      <result column="GENDER"    property="gender"/>
    </association>
  </resultMap>
  
  <insert id="insertMember"
          parameterType="MemberDto">
    <selectKey keyProperty="memberNo" order="BEFORE" resultType="int">
      SELECT MEMBER_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>
    
    INSERT INTO MEMBER_T (
        MEMBER_NO
      , EMAIL
      , NAME
      , GENDER
    ) VALUES (
        #{memberNo}
      , #{email}
      , #{name}
      , #{gender}
    )
  </insert>
  
  <insert id="insertAddress"
            parameterType="AddressDto">
      INSERT INTO ADDRESS_T (
          ADDRESS_NO
        , ZONECODE
        , ADDRESS
        , DETAIL_ADDRESS
        , EXTRA_ADDRESS
        , MEMBER_NO
      ) VALUES (
          ADDRESS_SEQ.NEXTVAL
        , #{zonecode}
        , #{address}
        , #{detailAddress}
        , #{extraAddress}
        , #{member.memberNo}  <!-- setter 를 호출해서 member 라는 이름으로 MemberDto 내에 memberNo를 가져옴 -->
      )
      
   </insert>
   
  <update id="updateMember"
          parameterType="Map">
    UPDATE MEMBER_T
       SET NAME = #{name}
         , GENDER = #{gender}
     WHERE MEMBER_NO = #{memberNo}
  </update>
  
  <update id="updateAddress"
          parameterType="Map">
    UPDATE ADDRESS_T
       SET ZONECODE = #{zonecode}
         , ADDRESS = #{address}
         , DETAIL_ADDRESS = #{detailAddress}
         , EXTRA_ADDRESS = #{extraAddress}
     WHERE MEMBER_NO = #{memberNo}
  </update>
 
 <delete id="deleteMember"
         parameterType="int">
    DELETE 
      FROM MEMBER_T
     WHERE MEMBER_NO = #{memberNo} 
       
 </delete>
 
 <delete id="deleteMembers">
    DELETE
      FROM MEMBER_T
    WHERE MEMBER_NO <!-- IN(  1 2 3  , ) -->
    <foreach collection="list" item="memberNo" open="IN(" separator="," close=")"> <!-- item: List에서 하나씩 꺼내서 부르는 이름, open: 시작, separator: 요소 사이사이 추가, close: 끝 => for문으로 태그로 만들어 줌 => memberNo(변수)만 지정해주면 됨 --> 
       #{memberNo}
    </foreach>
 </delete>
 
  <select id="getTotalMemberCount"
           resultType="int">  <!-- 반환 타입 X , 결과 타입 : int (개수를 구해서 반환) -->
      SELECT COUNT(*)
        FROM MEMBER_T
   </select>
   
  <!-- SELECT 의 반환은 하나를 반환하나 여러개(LIST<>)를 반환하나 MemberDto로 반환함(resultType 같음) -->
  <select id="getMemberList"
           parameterType="Map"
           resultMap="AddressMap">                                         <!-- SELECT문으로 가져오는 데이터들이 resultType에 명시된 필드와 1:1 매칭하였을 때, 담을 수 있는지 확인해서 resultType을 명시해줘야함 => MemberDto의 경우 MEMBER_NO, EMAIL, NAME, GENDER 만 필드에 담을 수 있음 => 이에 resultType 잘못됨 -->
                                                                           <!-- resultType="AddressDto" 로 적용해도 SELECT문으로 가져온 데이터를 전달이 불가능함 -> 이에 MemberDto 의 데이터임을 명시하는 작업(resultMap 생성)이 필요함 -> 이러한 경우에는 resultType가 아닌 resultMap을 추가 -> 해당 작업을 하면 반환타입이 AddressDto가 됨 -->
       SELECT MEMBER_NO, EMAIL, NAME, GENDER, ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS <!-- 메인쿼리 --> 
         FROM (SELECT ROW_NUMBER() OVER (ORDER BY M.MEMBER_NO DESC) AS RN  <!-- 서브쿼리 (인라인뷰/FROM절 위치), 조건절을 추가해야할 경우에는 우선순위로 서브쿼리에 추가(실행순서 고려 필요함) => 혹시 불가능하다면 메인쿼리에 추가 --> 
                    , M.MEMBER_NO, M.EMAIL, M.NAME, M.GENDER
                    , A.ADDRESS_NO, A.ZONECODE, A.ADDRESS, A.DETAIL_ADDRESS, A.EXTRA_ADDRESS
                 FROM MEMBER_T M LEFT JOIN ADDRESS_T A
                   ON M.MEMBER_NO = A.MEMBER_NO)
        WHERE RN BETWEEN #{begin} AND #{end}                                <!-- begin 과 end 는 MAP에 들어있음(gender, name 등 추가 데이터를 넘겨야할 필요가 있다면 그 또한 MAP으로 구성하면 됨 => MAP으로 구성해서 전달하면 편리함) -->    
           
   </select>
  
  <!-- 상세페이지 -->
  <!-- 일반 변수로 parameterType 생략 가능 -->
  <select id="getMemberByNo"  
           resultType="MemberDto">
     SELECT MEMBER_NO, EMAIL, NAME, GENDER
       FROM MEMBER_T
      WHERE MEMBER_NO = #{memberNo}       <!-- 상세페이지에는 반드시 조회 조건이 들어가야 함 -->  
  </select>
 
  <select id="getTotalAddressCountByNo"
           resultType="int">
     SELECT COUNT(*)
       FROM ADDRESS_T
      WHERE MEMBER_NO = #{memberNo} 
   </select>
   
  
  <select id="getAddressListByNo"
          parameterType="Map"
          resultType="AddressDto">
         
   SELECT ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
     FROM (SELECT ROW_NUMBER() OVER(ORDER BY ADDRESS_NO DESC) AS RN, ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
             FROM ADDRESS_T
            WHERE MEMBER_NO = #{memberNo})
    WHERE RN BETWEEN #{begin} AND #{end}         
 </select>

 </mapper>