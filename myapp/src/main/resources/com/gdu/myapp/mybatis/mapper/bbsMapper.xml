<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 

    java : mapper            mybatis : mapper
   ―――――――――――――――――――――――――――――――――――――――――――
   
      interface   <――――――――        XML
      method       ――――――――>         id
                           
                           namespace : Interface

 --> 
  
  
<!-- 호출하는 인터페이스 경로 작성 -->
<mapper namespace="com.gdu.myapp.mapper.BbsMapper"> 
 
 <!--   
    id          : PK 
    result      : 일반 fild
    association : Dto 
  -->
 
 <!-- BbsDto 의 구조를 이용해 BbsMap 을 만들어서 resultType 대신 resultMap 으로 사용 : 조인할 때 사용함!-->
 <resultMap type="BbsDto" id="BbsMap">
   <id     property="bbsNo"      column="BBS_NO"/>
   <result property="contents"   column="CONTENTS"/>
   <result property="createDt"   column="CREATE_DT"/>
   <result property="state"      column="STATE"/>
   <result property="depth"      column="DEPTH"/>
   <result property="groupNo"    column="GROUP_NO"/>
   <result property="groupOrder" column="GROUP_ORDER"/>
   <association property="user"  javaType="UserDto">
     <id     property="userNo" column="USER_NO"/>
     <result property="email"  column="EMAIL"/>
   </association>
 </resultMap>
 
 
 
 <!-- 원글 삽입 -->
 <insert id="insertBbs"
         parameterType="BbsDto">
    INSERT INTO BBS_T (
        BBS_NO
      , CONTENTS
      , USER_NO
      , CREATE_DT
      , STATE
      , DEPTH
      , GROUP_NO
      , GROUP_ORDER
    ) VALUES (
        BBS_SEQ.NEXTVAL  <!-- NEXTVAL : 새로운 번호 뽑기 -->
      , #{contents}
      , #{user.userNo}   <!-- Dto에 userNo가 필드에 들어가있지 않고 UserDto 자체가 들어가 있어 user 내의 userNo 값을 넣어야함 -->
      , CURRENT_DATE
      , 1
      , 0
      , BBS_SEQ.CURRVAL  <!-- CURRVAL : 현재 시퀀스 번호 가져오기(BBS_NO와 같은 값) => 시퀀스 번호 새로 뽑으면 X -->
      , 0
    )      

 </insert>

 <!-- 전체 BBS 게시글 수 -->
 <select id="getBbsCount"
          resultType="int">
    SELECT COUNT(*)
      FROM BBS_T
 </select>
 
 <!-- BBS 게시글 목록 -->
 <select id="getBbsList"
         parameterType="Map"
         resultMap="BbsMap"> <!-- resultType 아님 -->
         
   <!-- 페이징 처리를 위한 ROW_NUMBER , 게시글 정렬은 쿼리문 내에서 진행해야 함 => ROW_NUMBER() OVER (ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN -->
   SELECT BBS_NO, CONTENTS, USER_NO, EMAIL, CREATE_DT, STATE, DEPTH, GROUP_NO, GROUP_ORDER
     FROM (SELECT ROW_NUMBER() OVER(ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN, B.BBS_NO, B.CONTENTS, U.USER_NO, U.EMAIL, B.CREATE_DT, B.STATE, B.DEPTH, B.GROUP_NO, B.GROUP_ORDER
             FROM USER_T U INNER JOIN BBS_T B
               ON U.USER_NO = B.USER_NO)   
    WHERE RN BETWEEN #{begin} AND #{end}
 </select>
 
 <!-- 답글 삽입 전 기존 답글들의 GROUP_ORDER 업데이트 -->
 <update id="updateGroupOrder"
         parameterType="BbsDto"> <!-- BbsDto 는 원글을 의미함 -->
   UPDATE BBS_T
     SET GROUP_ORDER = GROUP_ORDER + 1
   WHERE GROUP_NO = #{groupNo}
     AND GROUP_ORDER > #{groupOrder}
 </update>
 
 <!-- 답글 삽입 -->
 <insert id="insertReply"
         parameterType="BbsDto"> <!-- BbsDto 는 답글을 의미함 -->
   INSERT INTO BBS_T (
      BBS_NO
    , CONTENTS
    , USER_NO
    , CREATE_DT
    , STATE
    , DEPTH
    , GROUP_NO
    , GROUP_ORDER
  ) VALUES (
      BBS_SEQ.NEXTVAL  
    , #{contents}
    , #{user.userNo}   
    , CURRENT_DATE
    , 1
    , #{depth}
    , #{groupNo}
    , #{groupOrder}
  )      
 </insert> 

 <!-- BBS 게시글 삭제 (실제로는 state = 0 으로 업데이트) -->
 <update id="removeBbs">
   UPDATE BBS_T
      SET STATE = 0
    WHERE BBS_NO = #{bbsNo}
 </update>

<!--
    parameter 작성 방법
    1. #{}
      1) PreparedStatement 를 이용하여 ? 에 값을 저장하는 JDBC 방식으로 처리한다.
      2) 변수 값을 처리할 때 사용한다.
      2) 객체나 Map 에 저장된 프로퍼티(필드, Key)를 입력한다.
    2. ${}
      1) 문자열 대체는 전달된 값을 따옴표나 이스케이프 없이 그대로 사용한다.
      2) SQL 구문의 메타데이터(테이블 이름, 칼럼 이름, SQL 자체)를 처리할 때 사용한다.
  -->

<!-- 검색 결과 개수 -->
<select id="getSearchCount"
        parameterType="Map"
        resultType="int">
  SELECT COUNT(*)
    FROM USER_T U INNER JOIN BBS_T B
      ON U.USER_NO = B.USER_NO
   WHERE ${column} LIKE '%' || #{query} || '%' <!-- mybatis 에서는 칼럼의 이름을 심을 때 : ${}, 쿼리문의 일반 변수값을 심을 때 #{} -->
<!-- WHERE U.EMAIL LIK '%' || 'user' || '%  => column : 작은따옴표 없이 심기 , user :  작은따옴표 있게 심기(문자열) -->        
        
</select>

<!-- 검색 결과 목록 -->
<select id="getSearchList"
        parameterType="Map"
        resultMap="BbsMap">

SELECT BBS_NO, CONTENTS, USER_NO, EMAIL, CREATE_DT, STATE, DEPTH, GROUP_NO, GROUP_ORDER
     FROM (SELECT ROW_NUMBER() OVER(ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN, B.BBS_NO, B.CONTENTS, U.USER_NO, U.EMAIL, B.CREATE_DT, B.STATE, B.DEPTH, B.GROUP_NO, B.GROUP_ORDER
             FROM USER_T U INNER JOIN BBS_T B
               ON U.USER_NO = B.USER_NO
             WHERE ${column} LIKE CONCAT(CONCAT('%', #{query}),'%'))
   WHERE RN BETWEEN #{begin} AND #{end}      
</select>
 
 </mapper>